import os
import random
import redis
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 123456789  # –¢–≤–æ–π ID –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
REDIS_URL = "redis://localhost:6379/0"  # –ê–¥—Ä–µ—Å Redis

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
db = redis.from_url(REDIS_URL)

# –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –∏—Ö —à–∞–Ω—Å—ã (–≤–µ—Å–∞)
CARDS = {
    "common": [
        {"name": "–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ 1", "image": "common1.png", "weight": 50},
        {"name": "–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞ 2", "image": "common2.png", "weight": 30}
    ],
    "rare": [
        {"name": "–†–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞", "image": "rare1.png", "weight": 15},
    ],
    "legendary": [
        {"name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞", "image": "legendary1.png", "weight": 5}
    ]
}

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
DEFAULT_BACKGROUND = "default_bg.jpg"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéÅ –ö—É–ø–∏—Ç—å –ø–∞–∫ (15 –∑–≤—ë–∑–¥)", callback_data="buy_pack")],
        [InlineKeyboardButton("üìñ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
         InlineKeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
def get_random_card():
    total_weight = sum(card["weight"] for rarity in CARDS.values() for card in rarity)
    random_value = random.uniform(0, total_weight)
    current = 0
    for rarity, cards in CARDS.items():
        for card in cards:
            current += card["weight"]
            if random_value <= current:
                return {"rarity": rarity, **card}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_card(user_id, card):
    user_cards = db.get(f"user:{user_id}:cards")
    if not user_cards:
        cards = []
    else:
        cards = eval(user_cards.decode('utf-8'))
    cards.append(card)
    db.set(f"user:{user_id}:cards", str(cards))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_cards(user_id):
    user_cards = db.get(f"user:{user_id}:cards")
    return eval(user_cards.decode('utf-8')) if user_cards else []

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def get_balance(user_id):
    balance = db.hgetall(f"user:{user_id}:balance")
    if not balance:
        return {"stars": 0, "coins": 0}
    return {k.decode('utf-8'): int(v.decode('utf-8')) for k, v in balance.items()}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
def set_balance(user_id, stars=0, coins=0):
    db.hset(f"user:{user_id}:balance", "stars", stars)
    db.hset(f"user:{user_id}:balance", "coins", coins)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–Ω–∞
def get_background():
    bg_path = db.get("app:background")
    return bg_path.decode('utf-8') if bg_path else DEFAULT_BACKGROUND

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not db.exists(f"user:{user_id}:balance"):
        set_balance(user_id, stars=50, coins=0)  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    
    bg_path = get_background()
    try:
        with open(bg_path, 'rb') as bg_file:
            update.message.reply_photo(
                photo=bg_file,
                caption=f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n‚≠ê –ó–≤—ë–∑–¥—ã: {get_balance(user_id)['stars']}\nü™ô –ú–æ–Ω–µ—Ç—ã: {get_balance(user_id)['coins']}",
                reply_markup=main_menu()
            )
    except FileNotFoundError:
        update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–¥–º–∏–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ–Ω /setbg")

# –ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–∞
def buy_pack(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    balance = get_balance(user_id)
    
    if balance["stars"] < 15:
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!")
        return
    
    # –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤—ë–∑–¥ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    set_balance(user_id, balance["stars"] - 15, balance["coins"] + 15)
    
    # –í—ã–¥–∞—á–∞ 5 –∫–∞—Ä—Ç
    new_cards = [get_random_card() for _ in range(5)]
    for card in new_cards:
        save_user_card(user_id, card)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    cards_text = "\n".join([f"üé¥ {card['name']} ({card['rarity']})" for card in new_cards])
    query.edit_message_caption(
        caption=f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏:\n{cards_text}\n\n‚≠ê –ó–≤—ë–∑–¥—ã: {get_balance(user_id)['stars']}\nü™ô –ú–æ–Ω–µ—Ç—ã: {get_balance(user_id)['coins']}",
        reply_markup=main_menu()
    )

# –ü—Ä–æ—Ñ–∏–ª—å
def show_profile(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    cards = get_user_cards(user_id)
    
    if not cards:
        query.edit_message_caption(
            caption="üìñ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç.\n\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞–∫!",
            reply_markup=main_menu()
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    cards_by_rarity = {}
    for card in cards:
        if card["rarity"] not in cards_by_rarity:
            cards_by_rarity[card["rarity"]] = []
        cards_by_rarity[card["rarity"]].append(card["name"])
    
    profile_text = "üìö –í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n"
    for rarity, cards_list in cards_by_rarity.items():
        profile_text += f"\nüåü {rarity.upper()}:\n"
        profile_text += "\n".join([f"‚Ä¢ {card}" for card in cards_list])
    
    query.edit_message_caption(
        caption=f"{profile_text}\n\n‚≠ê –ó–≤—ë–∑–¥—ã: {get_balance(user_id)['stars']}\nü™ô –ú–æ–Ω–µ—Ç—ã: {get_balance(user_id)['coins']}",
        reply_markup=main_menu()
    )

# –ê–¥–º–∏–Ω: —Å–º–µ–Ω–∞ —Ñ–æ–Ω–∞
def set_background(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return
    
    if not update.message.photo:
        update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        return
    
    photo = update.message.photo[-1].get_file()
    new_bg_path = "custom_bg.jpg"
    photo.download(new_bg_path)
    db.set("app:background", new_bg_path)
    update.message.reply_text("‚úÖ –§–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("setbg", set_background))
    dp.add_handler(CallbackQueryHandler(buy_pack, pattern="buy_pack"))
    dp.add_handler(CallbackQueryHandler(show_profile, pattern="profile"))
    dp.add_handler(CallbackQueryHandler(start, pattern="back"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
